#lang ivy1.7

type key
type value
type node

relation table(N:node, K:key, V:value)
relation owner(N:node, K:key)
relation transfer_msg(N:node, K:key, V:value)

after init {
    table(N, K, V) := false;
    transfer_msg(N, K, V) := false;
    require owner(N1, K) & owner(N2, K) -> N1 = N2;
}

action reshard(k: key, v: value, n_old: node, n_new: node) = {
    require table(n_old, k, v);
    table(n_old, k, v) := false;
    owner(n_old, k) := false;
    transfer_msg(n_new, k, v) := true;
}

action recv_transfer_msg(n: node, k: key, v: value) = {
    require transfer_msg(n, k, v);
    transfer_msg(n, k, v) := false;
    table(n, k, v) := true;
    owner(n, k) := true;
}

action put(n: node, k: key, v: value) = {
    require owner(n, k);
    table(n, k, V) := V = v;
}

export reshard
export recv_transfer_msg
export put

# safety property
invariant table(N1, K, V1) & table(N2, K, V2) -> N1 = N2 & V1 = V2

conjecture forall E2,E1.forall A1.forall C2,C1.E2~=E1 & C2~=C1 -> ~(table(E2,A1,C2) = true & transfer_msg(E1,A1,C1) = true)
conjecture forall E2,E1.forall A1.forall C2.E2~=E1 -> ~(table(E2,A1,C2) = true & owner(E1,A1) = true)
conjecture forall E2.forall A1.forall C2,C1.C2~=C1 -> ~(table(E2,A1,C2) = true & table(E2,A1,C1) = true)
conjecture forall E1,E2.forall A1.forall C1,C2.E1~=E2 & C1~=C2 -> ~(transfer_msg(E1,A1,C1) = true & transfer_msg(E2,A1,C2) = true)
conjecture forall E1,E2.forall A1.forall C1.E1~=E2 -> ~(transfer_msg(E1,A1,C1) = true & owner(E2,A1) = true)
conjecture forall E2,E1.forall A1.forall C2.E2~=E1 -> ~(table(E2,A1,C2) = true & transfer_msg(E1,A1,C2) = true)
conjecture forall E1,E2.forall A1.E1~=E2 -> ~(owner(E1,A1) = true & owner(E2,A1) = true)
conjecture forall E2.forall A1.forall C2,C1.C2~=C1 -> ~(table(E2,A1,C2) = true & transfer_msg(E2,A1,C1) = true)
conjecture forall E1,E2.forall A1.forall C1.E1~=E2 -> ~(transfer_msg(E1,A1,C1) = true & transfer_msg(E2,A1,C1) = true)
conjecture forall E2,E1.forall A1.forall C2.E2~=E1 -> ~(table(E2,A1,C2) = true & table(E1,A1,C2) = true)
conjecture forall E2.forall A1.forall C1,C2.C1~=C2 -> ~(transfer_msg(E2,A1,C1) = true & transfer_msg(E2,A1,C2) = true)
conjecture forall E2.forall A1.forall C1. ~(transfer_msg(E2,A1,C1) = true & owner(E2,A1) = true)
conjecture forall E1.forall A1.forall C1. ~(transfer_msg(E1,A1,C1) = true & table(E1,A1,C1) = true)


