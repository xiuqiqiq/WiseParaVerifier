#lang ivy1.7

type node
type lock

relation lock_msg(N: node, L: lock)
relation grant_msg(N: node, L: lock)
relation unlock_msg(N: node, L: lock)
relation holds_lock(N: node, L: lock)
relation server_holds_lock(L: lock)

after init {
    lock_msg(N, L) := false;
    grant_msg(N, L) := false;
    unlock_msg(N, L) := false;
    holds_lock(N, L) := false;
    server_holds_lock(L) := true;
}

action send_lock(n: node, l: lock) = {
    lock_msg(n, l) := true;
}

action recv_lock(n: node, l: lock) = {
    require lock_msg(n, l);
    require server_holds_lock(l);
    server_holds_lock(l) := false;
    lock_msg(n, l) := false;
    grant_msg(n, l) := true;
}

action recv_grant(n: node, l: lock) = {
    require grant_msg(n, l);
    grant_msg(n, l) := false;
    holds_lock(n, l) := true;
}

action unlock(n: node, l: lock) = {
    require holds_lock(n, l);
    holds_lock(n, l) := false;
    unlock_msg(n, l) := true;
}

action recv_unlock(n: node, l: lock) = {
    require unlock_msg(n, l);
    unlock_msg(n, l) := false;
    server_holds_lock(l) := true;
}

export send_lock
export recv_lock
export recv_grant
export unlock
export recv_unlock

# safety property
invariant holds_lock(N1, L) & holds_lock(N2, L) -> N1 = N2

conjecture forall A2,A1.forall C1.A2~=A1 -> ~(holds_lock(A2,C1) = true & grant_msg(A1,C1) = true)
conjecture forall A2.forall C1. ~(holds_lock(A2,C1) = true & server_holds_lock(C1) = true)
conjecture forall A1,A2.forall C1.A1~=A2 -> ~(grant_msg(A1,C1) = true & grant_msg(A2,C1) = true)
conjecture forall C1.forall A2. ~(server_holds_lock(C1) = true & grant_msg(A2,C1) = true)
conjecture forall A2,A1.forall C1.A2~=A1 -> ~(holds_lock(A2,C1) = true & unlock_msg(A1,C1) = true)
conjecture forall A2.forall C1. ~(holds_lock(A2,C1) = true & unlock_msg(A2,C1) = true)
conjecture forall A2,A1.forall C1.A2~=A1 -> ~(grant_msg(A2,C1) = true & unlock_msg(A1,C1) = true)
conjecture forall A2.forall C1. ~(grant_msg(A2,C1) = true & unlock_msg(A2,C1) = true)
conjecture forall A1.forall C1. ~(unlock_msg(A1,C1) = true & server_holds_lock(C1) = true)
conjecture forall A2.forall C1. ~(grant_msg(A2,C1) = true & holds_lock(A2,C1) = true)
conjecture forall A1,A2.forall C1.A1~=A2 -> ~(unlock_msg(A1,C1) = true & unlock_msg(A2,C1) = true)


